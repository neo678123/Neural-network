#include "NeuralNetwork.h"
#include <iostream>
#include <math.h>

NeuralNetwork::NeuralNetwork()
{
    weight ={{0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01},
             {0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01}};
}

NeuralNetwork::~NeuralNetwork(){}

double NeuralNetwork::think( std::vector<std::vector<int>> &in)
{
    out = 0;
    int i, j;
    for(i = 0; i <= 9; i++)
    {
        for(j = 0; j <= 9; j++)
        {
            out += in[i][j] * weight[i][j];
        }
    }
    if(round(out - 0.5) != 1)
        this->adjust(in);

    return out;
}

void NeuralNetwork::adjust( std::vector<std::vector<int>> &in)
{
    int i, j;
    for(i = 0; i <= 9; i++)
    {
        for(j = 0; j <= 9; j++)
        {
            weight[i][j] += (in[i][j] == 1) ? 0.00005 : -0.00005;
        }
    }
}
